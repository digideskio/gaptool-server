#!/usr/bin/env ruby
#
# convert the old data model for the gaptool server
# to the new struct

libpath = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))
$:.unshift(libpath)
require "#{libpath}/helpers/redis"
require "#{libpath}/helpers/data"
DH = Gaptool::Data

puts "Removing cruft"
# First, remove cruft. Like all servers created but never registered, etc
['instance:*', '_*', 'apikey:*', 'service:*', 'running', 'ec2*',
 'failover', 'capacity', 'sg:*'].each do |pattern|
  $redis.keys(pattern).each do |key|
    $redis.del key
  end
end

puts "Migrating apps..."
$redis.keys('app:*').each do |key|
  appname = key.sub('app:', '')
  role = $redis.hget(key, "role")
  if role.nil? || appname.nil?
    puts "Missing info for app: #{appname} role: #{role}"
  end
  $redis.del(key)
  DH.add_app(appname, role) unless role.nil?
end

puts "Migrating instances..."
$redis.keys('host:*').each do |key|
  pfx, role, env, iid = key.split(':')
  data = $redis.hgetall(key)
  data['role'] = role
  $redis.sadd('roles', role)
  data['environment'] = env
  DH.addserver(iid, data, nil)
  $redis.del(key)
  # remove stale keys from hsh
  $redis.hdel "instance:#{iid}", ["capacity", "mirror", "secret", 'instance']
end

puts "Removing unneeded info from instance data..."
$redis.smembers('instances').each do |inst|
  $redis.hdel "instance:#{inst}", ["capacity", "mirror", "secret", "instance"]
  if $redis.hget("instance:#{inst}", 'chef_runlist') == "recipe[init]"
    $redis.hdel "instance:#{inst}", "chef_runlist"
  end
end

$redis.save
